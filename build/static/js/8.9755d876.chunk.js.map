{"version":3,"sources":["components/Layout/Container/ContainerComponent.js","components/Plans/PlansComponent.js"],"names":["ContainerComponent","props","fullWidth","className","children","PlansComponent","useState","plans","setPlans","loading","setLoader","error","setError","productName","setProductName","spinner","setSpinner","urlProductID","match","params","productID","headers","hostname","window","location","origin","useEffect","axios","get","then","response","data","buttonProps","product","size","tooltipAlignment","onClick","name","post","id","navigator","language","res","redirectUrl","open","catch","console","log","redirectToPurchase","onCloseButtonClick","kind","lowContrast","role","title","subtitle","iconDescription","statusIconDescription","hideCloseButton","style","width","columnCount","rowCount","zebra","compact","showHeader","showToolbar","description","map","header","key","plan","active","withOverlay","small"],"mappings":"uHAAA,oEAIe,SAASA,EAAmBC,GAAQ,IACzCC,EAAcD,EAAdC,UAER,OACE,kBAAC,IAAD,CAAMA,UAAWA,EAAWC,UAAU,aACnCF,EAAMG,Y,+QCYE,SAASC,EAAeJ,GAAQ,IAAD,EAClBK,mBAAS,IADS,mBACrCC,EADqC,KAC9BC,EAD8B,OAEfF,oBAAS,GAFM,mBAErCG,EAFqC,KAE5BC,EAF4B,OAGlBJ,oBAAS,GAHS,mBAGrCK,EAHqC,KAG9BC,EAH8B,OAINN,mBAAS,IAJH,mBAIrCO,EAJqC,KAIxBC,EAJwB,OAKdR,oBAAS,GALK,mBAKrCS,EALqC,KAK5BC,EAL4B,KAOtCC,EAAehB,EAAMiB,MAAMC,OAAOC,UAClCC,EAAU,CAAC,UAAW,cAAe,IAErCC,EAGAC,OAAOC,SAASC,OAEtBC,qBAAU,WACRC,IACGC,IADH,UACUN,EADV,4BACsCL,EADtC,gBAEGY,MAAK,SAACC,GACLpB,GAAU,GACNoB,EAASC,MACXvB,EAASsB,EAASC,KAAKxB,YAG5B,IAEH,IAoBMyB,EAAc,SAACC,GACnB,MAAO,CACLC,KAAM,QACNC,iBAAkB,SAClBC,QAAS,kBAxBc,SAACH,GAC1BnB,EAAemB,EAAQI,MACvBrB,GAAW,GACXW,IACGW,KADH,UAEOhB,EAFP,4BAEmCL,EAFnC,sBAE6DgB,EAAQM,GAFrE,YAE2EC,UAAUC,WAElFZ,MAAK,SAACa,GACDA,EAAIX,KAAKY,YACXpB,OAAOqB,KAAKF,EAAIX,KAAKY,aAErB/B,GAAUD,GAEZK,GAAW,MAEZ6B,OAAM,SAAClC,GACNmC,QAAQC,IAAIpC,MAQCqC,CAAmBf,IAClC9B,UAAW,oBAiCT8C,EAAqB,kBAAMrC,GAAUD,IAE3C,OACE,oCACE,kBAAC,IAAD,KACGA,GAAS,kBAAC,IAjBgB,CAC/BuC,KAAM,QACNC,aAAa,EACbC,KAAM,QACNC,MAAOxC,EAAc,qBACrByC,SAAU,oBACVC,gBAAiB,6BACjBC,sBAAuB,4BACvBC,iBAAiB,EACjBR,mBAAoB,kBAAMA,OAUrBxC,EACC,oCACE,yBAAKiD,MAAO,CAAEC,MAAO,SACnB,kBAAC,IAhCmB,CAC9BtC,UACAuC,YAAa,EACbC,SAAU,GACVC,OAAO,EACPC,SAAS,EACTC,YAAY,EACZC,aAAa,IA0BH,+BAIJ,oCACE,kBAAC,IAAD,CACEZ,MAAM,QACNa,YAAY,6DAEZ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACG7C,EAAQ8C,KAAI,SAACC,GAAD,OACX,kBAAC,IAAD,CAAaC,IAAKD,GAASA,QAIjC,kBAAC,IAAD,KACG7D,EAAM4D,KAAI,SAACG,GAAD,OACT,kBAAC,IAAD,CAAUD,IAAKC,EAAK/B,IAClB,kBAAC,IAAD,KAAY+B,EAAKjC,MACjB,kBAAC,IAAD,KAAYiC,EAAKJ,aACjB,kBAAC,IAAD,KACE,kBAAC,IAAWlC,EAAYsC,GAAxB,sBAUjBvD,EAAU,kBAAC,IAAD,iBAzEa,CAC1BwD,OAAQxD,EACRyD,aAAa,EACbC,OAAO,EACPP,YAAa,IAqEA,CAA6B/D,UAAW,gBAAmB","file":"static/js/8.9755d876.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid } from \"carbon-components-react\";\nimport \"./Container.scss\";\n\nexport default function ContainerComponent(props) {\n  const { fullWidth } = props;\n\n  return (\n    <Grid fullWidth={fullWidth} className=\"container\">\n      {props.children}\n    </Grid>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  Button,\n  TableContainer,\n  DataTableSkeleton,\n  InlineNotification,\n  Loading,\n} from \"carbon-components-react\";\n\nimport ContainerComponent from \"./../Layout/Container/ContainerComponent\";\n\nimport \"./Plans.css\";\n\nexport default function PlansComponent(props) {\n  const [plans, setPlans] = useState([]);\n  const [loading, setLoader] = useState(true);\n  const [error, setError] = useState(false);\n  const [productName, setProductName] = useState(\"\");\n  const [spinner, setSpinner] = useState(false);\n\n  const urlProductID = props.match.params.productID;\n  const headers = [\"Product\", \"Description\", \"\"];\n\n  const hostname =\n    process.env.NODE_ENV === \"development\"\n      ? \"http://localhost:3000\"\n      : window.location.origin;\n\n  useEffect(() => {\n    axios\n      .get(`${hostname}/partner/product/${urlProductID}/plans/data`)\n      .then((response) => {\n        setLoader(false);\n        if (response.data) {\n          setPlans(response.data.plans);\n        }\n      });\n  }, []);\n\n  const redirectToPurchase = (product) => {\n    setProductName(product.name);\n    setSpinner(true);\n    axios\n      .post(\n        `${hostname}/partner/product/${urlProductID}/configure/${product.id}/${navigator.language}`\n      )\n      .then((res) => {\n        if (res.data.redirectUrl) {\n          window.open(res.data.redirectUrl);\n        } else {\n          setError(!error);\n        }\n        setSpinner(false);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const buttonProps = (product) => {\n    return {\n      size: \"small\",\n      tooltipAlignment: \"center\",\n      onClick: () => redirectToPurchase(product),\n      className: \"purchase-button\",\n    };\n  };\n\n  const loadingProps = () => ({\n    active: spinner,\n    withOverlay: true,\n    small: false,\n    description: \"\",\n  });\n\n  const skeletTableProps = () => ({\n    headers,\n    columnCount: 3,\n    rowCount: 20,\n    zebra: true,\n    compact: false,\n    showHeader: true,\n    showToolbar: false,\n  });\n\n  const notificationProps = () => ({\n    kind: \"error\",\n    lowContrast: false,\n    role: \"alert\",\n    title: productName + \" is not supported.\",\n    subtitle: \"Please try again.\",\n    iconDescription: \"describes the close button\",\n    statusIconDescription: \"describes the status icon\",\n    hideCloseButton: false,\n    onCloseButtonClick: () => onCloseButtonClick(),\n  });\n\n  const onCloseButtonClick = () => setError(!error);\n\n  return (\n    <>\n      <ContainerComponent>\n        {error && <InlineNotification {...notificationProps()} />}\n\n        {loading ? (\n          <>\n            <div style={{ width: \"auto\" }}>\n              <DataTableSkeleton {...skeletTableProps()} />\n              <br />\n            </div>\n          </>\n        ) : (\n          <>\n            <TableContainer\n              title=\"Plans\"\n              description=\"Click configure to build desired configuration and order.\"\n            >\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    {headers.map((header) => (\n                      <TableHeader key={header}>{header}</TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {plans.map((plan) => (\n                    <TableRow key={plan.id}>\n                      <TableCell>{plan.name}</TableCell>\n                      <TableCell>{plan.description}</TableCell>\n                      <TableCell>\n                        <Button {...buttonProps(plan)}>Purchase</Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </>\n        )}\n      </ContainerComponent>\n      {spinner ? <Loading {...loadingProps()} className={\"some-class\"} /> : \"\"}\n    </>\n  );\n}\n"],"sourceRoot":""}